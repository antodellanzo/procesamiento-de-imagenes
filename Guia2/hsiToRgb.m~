function [nuevaImagen] = hsiToRgb(imagen, mostrarImagen)
    nuevaImagen = zeros(size(imagen));
    [filas, columnas, canales] = size(imagen);
    for fila = 1 : 1 : filas
        for columna = 1 : 1 : columnas
            H = double(imagen(fila, columna, 1))*(2 * pi);
            S = double(imagen(fila, columna, 2));
            I = double(imagen(fila, columna, 3));
            nuevaImagen(fila, columna, 1) = getR(H, S, I);
            nuevaImagen(fila, columna, 2) = getG(H, S, I);
            nuevaImagen(fila, columna, 3) = getB(H, S, I);
        end
    end
    %{
    nuevaImagen = zeros(size(imagen));
    H = double(imagen(:, :, 1)) .* (2*pi);
    S = double(imagen(:, :, 2));
    I = double(imagen(:, :, 3));
    nuevaImagen(:, :, 1) = getR(H, S, I);
    nuevaImagen(:, :, 2) = getG(H, S, I);
    nuevaImagen(:, :, 3) = getB(H, S, I);
    %}
    
    if mostrarImagen == true
        figure;
        subplot(2, 2, 1), imshow(nuevaImagen), title('imagen en rgb');
        subplot(2, 2, 2), imshow(nuevaImagen(:, :, 1)), title('r');
        subplot(2, 2, 3), imshow(nuevaImagen(:, :, 2)), title('g');
        subplot(2, 2, 4), imshow(nuevaImagen(:, :, 3)), title('b');
    end
end

function [imagenEnRGB] = getImage(imagnRGB)
H = double(imagen(:, :, 1)) .* 360;
S = double(imagen(:, :, 2));
I = double(imagen(:, :, 3));
R = zeros(size(H));  
G = zeros(size(H));  
B = zeros(size(H));

primerSector = find(H < 120);
segundoSector = find(H >= 120 & H < 240);
tercerSector = find(H >= 240);

%primer sector --> 0 <= H < 120
B( primerSector) = I(primerSector) .* (1 - S(primerSector));
R(primerSector) = I(primerSector) * ( 1 + ( ( S(primerSector) .* cos(H(primerSector)) ) ./ (cos(60 - H(primerSector) ) ) ) );
G(primerSector) = (3 .* I(primerSector)) - (R + B);

%segundo sector -> 120 <= H < 240
H = H - 120;
R(segundoSector) = I(segundoSector) .* (1 - S(segundoSector));
G(segundoSector) = I(segundoSector) .* ( 1 + ( () .* () ) )

end

%{
function [r] = getR(H, S, I)
r = zeros(size(H));
primerSeccion = find( H < (2/3)*pi);
segundaSeccion = find ( H >= (2 / 3)*pi & H < (4 / 3)*pi );
terceraSeccion = find ( H >= (4/3)*pi & H < 2*pi );

r(primerSeccion) = I(primerSeccion) .* ( 1 + ( ( S(primerSeccion) .* cos(H(primerSeccion)) ) ./ cos ( (pi/3) - H(primerSeccion) ) ) );

r(segundaSeccion) = I(segundaSeccion) .* ( 1 - S(segundaSeccion) );

G = I .* (1 - S);
B = I .* ( 1 + ( ( S .* cos( H - ( (4 / 3)*pi ) ) ) ./ cos( ( pi / 3 ) - ( H - ( (4 / 3)*pi) )  ) ) );
r(terceraSeccion) = (3.*I(terceraSeccion)) - (G(terceraSeccion) + B(terceraSeccion));
end

function [g] = getG(H, S, I)
g = zeros(size(H));
primerSeccion = find( H < (2/3)*pi);
segundaSeccion = find ( H >= (2 / 3)*pi & H < (4 / 3)*pi );
terceraSeccion = find ( H >= (4/3)*pi );

R = I .* ( 1 + ( ( S .* cos(H) ) ./ cos ( (pi/3) - H ) ) );
B = I .* (1 - S);
g(primerSeccion) = (3.*I(primerSeccion)) - (R(primerSeccion) + B(primerSeccion));

g(segundaSeccion) = I(segundaSeccion) .* ( 1 + ( ( S(segundaSeccion) .* cos( H(segundaSeccion) - ((2/3)*pi) ) ) ./ cos( (pi/3) - (H(segundaSeccion) - ( (2/3)*pi) ) ) ) );

g(terceraSeccion) = I(terceraSeccion) .* (1 - S(terceraSeccion));
end

function [b] = getB(H, S, I)
b = zeros(size(H));
primerSeccion = find( H < (2/3)*pi);
segundaSeccion = find ( H >= (2 / 3)*pi & H < (4 / 3)*pi );
terceraSeccion = find ( H >= (4/3)*pi );

b(primerSeccion) = I(primerSeccion) .* (1 - S(primerSeccion));

g = I .* ( 1 + ( ( S .* cos( H - ((2/3)*pi) ) ) ./ cos( (pi/3) - (H - ( (2/3)*pi) ) ) ) );
r = I .* (1 - S);
b(segundaSeccion) = (3.*I(segundaSeccion)) - (r(segundaSeccion) + g(segundaSeccion));

b(terceraSeccion) = I(terceraSeccion) .* ( 1 + ( ( S(terceraSeccion) .* cos( H(terceraSeccion) - ( (4 / 3)*pi ) ) ) ./ cos( ( pi / 3 ) - ( H(terceraSeccion) - ( (4 / 3)*pi) )  ) ) );
end

function [r] = getR(H, S, I)
    if H >= 0 && H < (2 / 3)*pi
        r = I * ( 1 + ( ( S * cos(H) ) / cos ( (pi/3) - H ) ) );
    else
        if H >= (2 / 3)*pi && H < (4 / 3)*pi
            r = I * ( 1 - S );
        else
            G = I * (1 - S);
            B = I * ( 1 + ( ( S * cos( H - ( (4 / 3)*pi ) ) ) / cos( ( pi / 3 ) - ( H - ( (4 / 3)*pi) )  ) ) );
            r = (3*I) - (G + B);
        end
    end
end

function [g] = getG(H, S, I)
    if H >= 0 && H < (2 / 3)*pi
        R = I * ( 1 + ( ( S * cos(H) ) / cos ( (pi/3) - H ) ) );
        B = I * (1 - S);
        g = (3*I) - (R + B);
    else
        if H >= (2 / 3)*pi && H < (4 / 3)*pi
            g = I * ( 1 + ( ( S * cos( H - ((2/3)*pi) ) ) / cos( (pi/3) - (H - ( (2/3)*pi) ) ) ) );
        else
            g = I * (1 - S);
        end
    end
end

function [b] = getB(H, S, I)
    if H >= 0 && H < (2 / 3)*pi
        b = I * (1 - S);
    else
        if H >= (2 / 3)*pi && H < (4 / 3)*pi
            g = I * ( 1 + ( ( S * cos( H - ((2/3)*pi) ) ) / cos( (pi/3) - (H - ( (2/3)*pi) ) ) ) );
            r = I*(1 - S);
            b = (3*I) - (r + g);
        else
            b = I * ( 1 + ( ( S * cos( H - ( (4 / 3)*pi ) ) ) / cos( ( pi / 3 ) - ( H - ( (4 / 3)*pi) )  ) ) );
        end
    end
end
%}